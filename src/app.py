import sys
import tkinter as tk
from tkinter import messagebox, ttk
import numpy as np
from PIL import Image, ImageDraw, ImageOps
import onnxruntime as ort
import cv2
from scipy import ndimage
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import threading
import os

def resource_path(relative_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å—É, —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è dev –∏ –¥–ª—è PyInstaller"""
    try:
        # PyInstaller —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É _MEIPASS
        base_path = sys._MEIPASS
        # –î–ª—è PyInstaller: —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'src'
        # –ü–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 'src' –∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–Ω—É—Ç—Ä–∏ _MEIPASS
        relative_path = os.path.join('src', relative_path)
    except Exception:
        # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: —Ñ–∞–π–ª—ã –∏—â–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)



class ModernDigitRecognizer:
    def __init__(self):

        model_loaded = False

        model_paths = [
            resource_path("resources/models/improved_digit_recognition_model.onnx"),
            "resources/models/improved_digit_recognition_model.onnx",
            "improved_digit_recognition_model.onnx",
        ]
        for model_path in model_paths:
            try:
                if os.path.exists(model_path):
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ONNX –º–æ–¥–µ–ª–∏: {model_path}")

                    self.model = ort.InferenceSession(model_path, providers=[
                        'CPUExecutionProvider'])
                    print(f" ONNX –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path}")
                    model_loaded = True
                    break
                else:
                    print(f" ONNX –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ONNX –º–æ–¥–µ–ª–∏ {model_path}: {e}")
                continue
        if not model_loaded:
            raise FileNotFoundError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ONNX –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π.")

        # –¢–µ–º—ã
        self.themes = {
            'light': {
                'bg': '#f0f0f0',
                'fg': '#2c3e50',
                'canvas_bg': 'white',
                'button_bg': '#4a90e2',
                'clear_bg': '#ff6b6b',
                'show_bg': '#50c878',
                'text_secondary': '#7f8c8d',
                'frame_bg': '#f8f9fa',
                'border_color': '#2c3e50',
                'result_text': '#2c3e50',
                'window_controls': '#e0e0e0',
                'window_border': '#cccccc'
            },
            'dark': {
                'bg': '#2c3e50',
                'fg': '#ecf0f1',
                'canvas_bg': '#34495e',
                'button_bg': '#3498db',
                'clear_bg': '#e74c3c',
                'show_bg': '#27ae60',
                'text_secondary': '#bdc3c7',
                'frame_bg': '#34495e',
                'border_color': '#ecf0f1',
                'result_text': '#ecf0f1',
                'window_controls': '#3c4e60',
                'window_border': '#1a2530'
            },
            'blue': {
                'bg': '#1e3d59',
                'fg': '#ffffff',
                'canvas_bg': '#2a4d69',
                'button_bg': '#4abdac',
                'clear_bg': '#ff6b6b',
                'show_bg': '#4ecdc4',
                'text_secondary': '#d4e6f1',
                'frame_bg': '#2a4d69',
                'border_color': '#4abdac',
                'result_text': '#ffffff',
                'window_controls': '#2d5d79',
                'window_border': '#152a3d'
            }
        }

        self.current_theme = 'light'
        self.theme_transition_active = False
        self.is_fullscreen = False

        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root = tk.Tk()
        self.root.title("üß† AI –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä")
        self.root.geometry("450x700")
        self.root.configure(bg=self.themes[self.current_theme]['bg'])
        self.root.minsize(400, 600)

        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Tkinter
        self.brush_size = tk.DoubleVar(value=12)

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        self.image = Image.new("L", (280, 280), 255)  # –±–µ–ª—ã–π —Ñ–æ–Ω
        self.draw = ImageDraw.Draw(self.image)

        # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∏–∏
        self.last_x, self.last_y = None, None

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        self.debounce_timer = None
        self.tooltip = None

        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        self.prediction_history = []

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_ui()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.bind_events()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–µ–º—É
        self.apply_theme()

    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º —Ç–µ–º—ã
        header_frame = tk.Frame(self.root, bg=self.themes[self.current_theme]['bg'])
        header_frame.pack(pady=10, padx=20, fill='x')

        title_frame = tk.Frame(header_frame, bg=self.themes[self.current_theme]['bg'])
        title_frame.pack(side=tk.LEFT)

        title_label = tk.Label(
            title_frame,
            text="üß† –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä",
            font=("Segoe UI", 16, "bold"),
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['fg']
        )
        title_label.pack(anchor='w')

        subtitle_label = tk.Label(
            title_frame,
            text="–ù–∞—Ä–∏—Å—É–π—Ç–µ —Ü–∏—Ñ—Ä—É –≤ –ø–æ–ª–µ –Ω–∏–∂–µ",
            font=("Segoe UI", 10),
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['text_secondary']
        )
        subtitle_label.pack(anchor='w')

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã –∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        control_frame = tk.Frame(header_frame, bg=self.themes[self.current_theme]['bg'])
        control_frame.pack(side=tk.RIGHT)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        fullscreen_label = tk.Label(
            control_frame,
            text="‚¨ú",
            font=("Segoe UI", 12),
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['fg'],
            cursor="hand2"
        )
        fullscreen_label.pack(side=tk.LEFT, padx=5)
        fullscreen_label.bind("<Button-1>", self.toggle_fullscreen)
        self.fullscreen_label = fullscreen_label
        self.create_tooltip(fullscreen_label, "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (F11)")

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        theme_label = tk.Label(
            control_frame,
            text="üåô",
            font=("Segoe UI", 14),
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['fg'],
            cursor="hand2"
        )
        theme_label.pack(side=tk.LEFT)
        theme_label.bind("<Button-1>", self.toggle_theme)
        self.theme_label = theme_label
        self.create_tooltip(theme_label, "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É (Ctrl+T)")

        # –°–ª–∞–π–¥–µ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∫–∏—Å—Ç–∏
        brush_frame = tk.Frame(self.root, bg=self.themes[self.current_theme]['bg'])
        brush_frame.pack(pady=5, padx=20, fill='x')

        brush_label = tk.Label(brush_frame, text="üé® –†–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏:",
                               font=("Segoe UI", 9),
                               bg=self.themes[self.current_theme]['bg'],
                               fg=self.themes[self.current_theme]['fg'])
        brush_label.pack(side=tk.LEFT)
        self.create_tooltip(brush_label, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –∏–ª–∏ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üë‚Üì")

        brush_slider = tk.Scale(
            brush_frame,
            from_=2,
            to=20,
            orient=tk.HORIZONTAL,
            variable=self.brush_size,
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['fg'],
            highlightthickness=0,
            length=100,
            font=("Segoe UI", 8),
            cursor="hand2"
        )
        brush_slider.pack(side=tk.LEFT, padx=10)

        # –•–æ–ª—Å—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å —Ä–∞–º–∫–æ–π
        canvas_frame = tk.Frame(
            self.root,
            bg=self.themes[self.current_theme]['border_color'],
            bd=2,
            relief='solid'
        )
        canvas_frame.pack(pady=10, padx=20)

        self.canvas = tk.Canvas(
            canvas_frame,
            width=280,
            height=280,
            bg=self.themes[self.current_theme]['canvas_bg'],
            cursor="cross",
            highlightthickness=0
        )
        self.canvas.pack(padx=2, pady=2)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        button_frame = tk.Frame(self.root, bg=self.themes[self.current_theme]['bg'])
        button_frame.pack(pady=15)

        # –ö–Ω–æ–ø–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        self.clear_button = self.create_feedback_button(
            button_frame,
            "üßπ –û—á–∏—Å—Ç–∏—Ç—å",
            self.clear_canvas,
            self.themes[self.current_theme]['clear_bg']
        )
        self.clear_button.pack(side=tk.LEFT, padx=5)
        self.create_tooltip(self.clear_button, "–û—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª—Å—Ç (Ctrl+C –∏–ª–∏ Delete)")

        self.predict_button = self.create_feedback_button(
            button_frame,
            "üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å",
            self.predict_digit,
            self.themes[self.current_theme]['button_bg']
        )
        self.predict_button.pack(side=tk.LEFT, padx=5)
        self.create_tooltip(self.predict_button, "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–∏—Ñ—Ä—É (Ctrl+R –∏–ª–∏ Enter)")

        self.show_image_button = self.create_feedback_button(
            button_frame,
            "üñºÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å",
            self.show_processed_image,
            self.themes[self.current_theme]['show_bg']
        )
        self.show_image_button.pack(side=tk.LEFT, padx=5)
        self.create_tooltip(self.show_image_button, "–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (Ctrl+P)")

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        self.probability_button = self.create_feedback_button(
            button_frame,
            "üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏",
            self.show_probability_chart,
            self.themes[self.current_theme]['button_bg']
        )
        self.probability_button.pack(side=tk.LEFT, padx=5)
        self.create_tooltip(self.probability_button, "–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")

        # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏
        self.result_frame = tk.Frame(self.root, bg=self.themes[self.current_theme]['bg'])
        self.result_frame.pack(pady=10, padx=20, fill='x')

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_label = tk.Label(
            self.result_frame,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é...",
            font=("Segoe UI", 14, "bold"),
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['result_text']
        )
        self.result_label.pack(pady=5)

        # –î–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.details_label = tk.Label(
            self.result_frame,
            text="",
            font=("Segoe UI", 10),
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['text_secondary']
        )
        self.details_label.pack()

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        self.confidence_frame = tk.Frame(self.result_frame, bg=self.themes[self.current_theme]['bg'])
        self.confidence_frame.pack(pady=5)

        self.confidence_label = tk.Label(
            self.confidence_frame,
            text="",
            font=("Segoe UI", 9),
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['fg']
        )
        self.confidence_label.pack()

        self.confidence_canvas = tk.Canvas(
            self.confidence_frame,
            width=200,
            height=15,
            bg=self.themes[self.current_theme]['frame_bg'],
            highlightthickness=0
        )
        self.confidence_canvas.pack()

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å —Ç–µ–∫—Å—Ç–æ–º
        progress_container = tk.Frame(self.result_frame, bg=self.themes[self.current_theme]['bg'])
        progress_container.pack(pady=5)

        self.progress_text = tk.Label(
            progress_container,
            text="",
            font=("Segoe UI", 9),
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['text_secondary']
        )
        self.progress_text.pack()

        self.progress = ttk.Progressbar(
            progress_container,
            mode='indeterminate',
            length=200
        )
        self.progress.pack()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = tk.Frame(self.root, bg=self.themes[self.current_theme]['bg'])
        info_frame.pack(pady=10, padx=20, fill='x')

        info_label = tk.Label(
            info_frame,
            text="üí° –°–æ–≤–µ—Ç: –†–∏—Å—É–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ü–∏—Ñ—Ä—ã –ø–æ —Ü–µ–Ω—Ç—Ä—É",
            font=("Segoe UI", 9),
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['text_secondary']
        )
        info_label.pack()

        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        hotkeys_label = tk.Label(
            info_frame,
            text="‚å®Ô∏è Ctrl+C: –û—á–∏—Å—Ç–∏—Ç—å | Ctrl+R: –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å | Ctrl+P: –ü–æ–∫–∞–∑–∞—Ç—å | Ctrl+T: –¢–µ–º–∞ | F11: –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω",
            font=("Segoe UI", 8),
            bg=self.themes[self.current_theme]['bg'],
            fg=self.themes[self.current_theme]['text_secondary']
        )
        hotkeys_label.pack(pady=(5, 0))

    def create_feedback_button(self, parent, text, command, bg_color):
        """–ö–Ω–æ–ø–∫–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""

        def on_enter(e):
            button.config(bg=self.lighten_color(bg_color))

        def on_leave(e):
            button.config(bg=bg_color)

        def on_click(e):
            button.config(relief='sunken')
            self.root.after(100, lambda: button.config(relief='raised'))
            command()

        button = tk.Button(
            parent,
            text=text,
            font=("Segoe UI", 10, "bold"),
            width=12,
            relief='raised',
            bd=2,
            fg='white',
            bg=bg_color,
            activebackground=self.darken_color(bg_color),
            activeforeground='white',
            padx=10,
            pady=5,
            cursor='hand2'
        )

        button.bind("<Enter>", on_enter)
        button.bind("<Leave>", on_leave)
        button.bind("<Button-1>", on_click)

        return button

    def lighten_color(self, color):
        """–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞"""
        color_map = {
            '#4a90e2': '#6bb3ff',
            '#ff6b6b': '#ff8e8e',
            '#50c878': '#73ff9b',
            '#3498db': '#5dade2',
            '#e74c3c': '#ec7063',
            '#27ae60': '#2ecc71',
            '#4abdac': '#5fd3c2'
        }
        return color_map.get(color, color)

    def toggle_theme(self, event=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        if self.theme_transition_active:
            return

        themes_list = list(self.themes.keys())
        current_index = themes_list.index(self.current_theme)
        next_index = (current_index + 1) % len(themes_list)
        next_theme = themes_list[next_index]

        self.animate_theme_transition(self.current_theme, next_theme)

    def toggle_fullscreen(self, event=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.is_fullscreen = not self.is_fullscreen
        self.root.attributes('-fullscreen', self.is_fullscreen)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
        if self.is_fullscreen:
            self.fullscreen_label.config(text="‚ßâ")
            self.fullscreen_label.config(text="‚ßâ")
        else:
            self.fullscreen_label.config(text="‚¨ú")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        if hasattr(self, 'tooltip') and self.tooltip:
            self.tooltip.destroy()
            self.tooltip = None

    def animate_theme_transition(self, from_theme, to_theme, step=0):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏"""
        self.theme_transition_active = True

        if step > 20:  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            self.current_theme = to_theme
            self.apply_theme()
            self.theme_transition_active = False
            return

        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
        progress = step / 20.0

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
        bg_color = self.interpolate_color(
            self.themes[from_theme]['bg'],
            self.themes[to_theme]['bg'],
            progress
        )
        self.root.configure(bg=bg_color)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –∏ –≤–∏–¥–∂–µ—Ç—ã
        self.animate_all_widgets(from_theme, to_theme, progress)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
        icons = {'light': 'üåô', 'dark': '‚òÄÔ∏è', 'blue': 'üåä'}
        icon_color = self.interpolate_color(
            self.themes[from_theme]['fg'],
            self.themes[to_theme]['fg'],
            progress
        )
        self.theme_label.configure(
            bg=bg_color,
            fg=icon_color
        )
        self.fullscreen_label.configure(
            bg=bg_color,
            fg=icon_color
        )

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.root.after(20, lambda: self.animate_theme_transition(from_theme, to_theme, step + 1))

    def animate_all_widgets(self, from_theme, to_theme, progress):
        """–ü–æ–ª–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        for widget in self.root.winfo_children():
            self.animate_widget(widget, from_theme, to_theme, progress)

    def animate_widget(self, widget, from_theme, to_theme, progress):
        """–ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        if isinstance(widget, tk.Frame):
            # –ê–Ω–∏–º–∏—Ä—É–µ–º —Ñ—Ä–µ–π–º
            bg_color = self.interpolate_color(
                self.themes[from_theme]['bg'],
                self.themes[to_theme]['bg'],
                progress
            )
            widget.configure(bg=bg_color)

            # –ê–Ω–∏–º–∏—Ä—É–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for child in widget.winfo_children():
                self.animate_widget(child, from_theme, to_theme, progress)

        elif isinstance(widget, tk.Label):
            # –ê–Ω–∏–º–∏—Ä—É–µ–º –Ω–∞–¥–ø–∏—Å–∏
            self.animate_label(widget, from_theme, to_theme, progress)

        elif isinstance(widget, tk.Button):
            # –ê–Ω–∏–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            self.animate_button(widget, from_theme, to_theme, progress)

        elif isinstance(widget, tk.Scale):
            # –ê–Ω–∏–º–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä—ã
            self.animate_scale(widget, from_theme, to_theme, progress)

        elif isinstance(widget, tk.Canvas):
            # –ê–Ω–∏–º–∏—Ä—É–µ–º —Ö–æ–ª—Å—Ç—ã
            self.animate_canvas(widget, from_theme, to_theme, progress)

    def animate_label(self, label, from_theme, to_theme, progress):
        """–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–¥–ø–∏—Å–∏"""
        text = label.cget('text')
        bg_color = self.interpolate_color(
            self.themes[from_theme]['bg'],
            self.themes[to_theme]['bg'],
            progress
        )

        if '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä' in text:
            fg_color = self.interpolate_color(
                self.themes[from_theme]['fg'],
                self.themes[to_theme]['fg'],
                progress
            )
        elif any(keyword in text for keyword in ['–ù–∞—Ä–∏—Å—É–π—Ç–µ —Ü–∏—Ñ—Ä—É', '–°–æ–≤–µ—Ç:', '‚å®Ô∏è', '–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:', 'üìä']):
            fg_color = self.interpolate_color(
                self.themes[from_theme]['text_secondary'],
                self.themes[to_theme]['text_secondary'],
                progress
            )
        else:
            fg_color = self.interpolate_color(
                self.themes[from_theme]['fg'],
                self.themes[to_theme]['fg'],
                progress
            )

        label.configure(bg=bg_color, fg=fg_color)

    def animate_button(self, button, from_theme, to_theme, progress):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏"""
        # –ê–Ω–∏–º–∏—Ä—É–µ–º —Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        parent_bg = self.interpolate_color(
            self.themes[from_theme]['bg'],
            self.themes[to_theme]['bg'],
            progress
        )
        button.configure(bg=parent_bg)

        # –î–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        button.configure(fg='white')  # –¢–µ–∫—Å—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–ª—ã–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

    def animate_scale(self, scale, from_theme, to_theme, progress):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞"""
        bg_color = self.interpolate_color(
            self.themes[from_theme]['bg'],
            self.themes[to_theme]['bg'],
            progress
        )
        fg_color = self.interpolate_color(
            self.themes[from_theme]['fg'],
            self.themes[to_theme]['fg'],
            progress
        )
        trough_color = self.interpolate_color(
            self.themes[from_theme]['frame_bg'],
            self.themes[to_theme]['frame_bg'],
            progress
        )
        scale.configure(bg=bg_color, fg=fg_color, troughcolor=trough_color)

    def animate_canvas(self, canvas, from_theme, to_theme, progress):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–ª—Å—Ç–∞"""
        if canvas == self.canvas:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ö–æ–ª—Å—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
            bg_color = self.interpolate_color(
                self.themes[from_theme]['canvas_bg'],
                self.themes[to_theme]['canvas_bg'],
                progress
            )
            canvas.configure(bg=bg_color)
        elif canvas == self.confidence_canvas:
            # –•–æ–ª—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            bg_color = self.interpolate_color(
                self.themes[from_theme]['frame_bg'],
                self.themes[to_theme]['frame_bg'],
                progress
            )
            canvas.configure(bg=bg_color)

    def interpolate_color(self, color1, color2, factor):
        """–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏"""
        if color1 == color2:
            return color1

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–≤–µ—Ç–∞ –≤ RGB
        try:
            r1 = int(color1[1:3], 16)
            g1 = int(color1[3:5], 16)
            b1 = int(color1[5:7], 16)

            r2 = int(color2[1:3], 16)
            g2 = int(color2[3:5], 16)
            b2 = int(color2[5:7], 16)

            # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º
            r = int(r1 + (r2 - r1) * factor)
            g = int(g1 + (g2 - g1) * factor)
            b = int(b1 + (b2 - b1) * factor)

            return f"#{r:02x}{g:02x}{b:02x}"
        except:
            return color1  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ü–≤–µ—Ç

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        theme = self.themes[self.current_theme]

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root.configure(bg=theme['bg'])

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –∏ –≤–∏–¥–∂–µ—Ç—ã
        for widget in self.root.winfo_children():
            if isinstance(widget, tk.Frame):
                widget.configure(bg=theme['bg'])
                for child in widget.winfo_children():
                    self.update_widget_theme(child, theme)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ–ª—Å—Ç
        canvas_frame = self.canvas.master
        canvas_frame.configure(bg=theme['border_color'])
        self.canvas.configure(bg=theme['canvas_bg'])

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        buttons_config = [
            (self.clear_button, theme['clear_bg']),
            (self.predict_button, theme['button_bg']),
            (self.show_image_button, theme['show_bg']),
            (self.probability_button, theme['button_bg'])
        ]

        for button, color in buttons_config:
            button.configure(
                bg=color,
                activebackground=self.darken_color(color)
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_frame.configure(bg=theme['bg'])
        self.result_label.configure(
            bg=theme['bg'],
            fg=theme['result_text']
        )
        self.details_label.configure(
            bg=theme['bg'],
            fg=theme['text_secondary']
        )
        self.confidence_label.configure(
            bg=theme['bg'],
            fg=theme['fg']
        )
        self.confidence_canvas.configure(
            bg=theme['frame_bg']
        )
        self.progress_text.configure(
            bg=theme['bg'],
            fg=theme['text_secondary']
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä
        for widget in self.root.winfo_children():
            if isinstance(widget, tk.Frame):
                for child in widget.winfo_children():
                    if isinstance(child, tk.Scale):
                        child.configure(
                            bg=theme['bg'],
                            fg=theme['fg'],
                            troughcolor=theme['frame_bg']
                        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
        icons = {'light': 'üåô', 'dark': '‚òÄÔ∏è', 'blue': 'üåä'}
        self.theme_label.configure(
            text=icons.get(self.current_theme, 'üåô'),
            bg=theme['bg'],
            fg=theme['fg']
        )

        fullscreen_icons = {'normal': '‚¨ú', 'fullscreen': '‚ßâ'}
        self.fullscreen_label.configure(
            bg=theme['bg'],
            fg=theme['fg']
        )

    def update_widget_theme(self, widget, theme):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞"""
        if isinstance(widget, tk.Label):
            if '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä' in widget.cget('text'):
                widget.configure(bg=theme['bg'], fg=theme['fg'])
            elif any(text in widget.cget('text') for text in
                     ['–ù–∞—Ä–∏—Å—É–π—Ç–µ —Ü–∏—Ñ—Ä—É', '–°–æ–≤–µ—Ç:', '‚å®Ô∏è', '–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:', 'üìä']):
                widget.configure(bg=theme['bg'], fg=theme['text_secondary'])
            else:
                widget.configure(bg=theme['bg'], fg=theme['fg'])
        elif isinstance(widget, tk.Frame):
            widget.configure(bg=theme['bg'])
            for subchild in widget.winfo_children():
                self.update_widget_theme(subchild, theme)
        elif isinstance(widget, tk.Scale):
            widget.configure(
                bg=theme['bg'],
                fg=theme['fg'],
                troughcolor=theme['frame_bg']
            )
        elif isinstance(widget, tk.Canvas):
            if widget == self.canvas:
                widget.configure(bg=theme['canvas_bg'])
            elif widget == self.confidence_canvas:
                widget.configure(bg=theme['frame_bg'])

    def darken_color(self, color):
        """–ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è activebackground"""
        color_map = {
            '#ff6b6b': '#c0392b',  # clear_bg light
            '#4a90e2': '#2980b9',  # button_bg light
            '#50c878': '#27ae60',  # show_bg light
            '#e74c3c': '#c0392b',  # clear_bg dark
            '#3498db': '#2980b9',  # button_bg dark
            '#27ae60': '#229954',  # show_bg dark
            '#4abdac': '#3d9a8d'  # blue theme
        }
        return color_map.get(color, color)

    def bind_events(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        self.canvas.bind("<B1-Motion>", self.draw_digit)
        self.canvas.bind("<ButtonPress-1>", self.start_draw)
        self.canvas.bind("<ButtonRelease-1>", self.reset_last_coords)
        self.canvas.bind("<Double-Button-1>", lambda e: self.clear_canvas())
        self.canvas.bind("<MouseWheel>", self.change_brush_size)

        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.root.bind("<Control-c>", lambda e: self.clear_canvas())
        self.root.bind("<Control-r>", lambda e: self.predict_digit())
        self.root.bind("<Control-p>", lambda e: self.show_processed_image())
        self.root.bind("<Control-t>", lambda e: self.toggle_theme())
        self.root.bind("<Delete>", lambda e: self.clear_canvas())
        self.root.bind("<Return>", lambda e: self.predict_digit())
        self.root.bind("<space>", lambda e: self.predict_digit())
        self.root.bind("<Up>", lambda e: self.adjust_brush_size(1))
        self.root.bind("<Down>", lambda e: self.adjust_brush_size(-1))
        self.root.bind("<F11>", self.toggle_fullscreen)
        self.root.bind("<Escape>", lambda e: self.exit_fullscreen())

    def exit_fullscreen(self, event=None):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if self.is_fullscreen:
            self.is_fullscreen = False
            self.root.attributes('-fullscreen', False)
            self.fullscreen_label.config(text="‚¨ú")

    def change_brush_size(self, event):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∏—Å—Ç–∏ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏"""
        delta = 1 if event.delta > 0 else -1
        current = self.brush_size.get()
        new_size = max(2, min(20, current + delta))
        self.brush_size.set(new_size)

    def adjust_brush_size(self, delta):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∏—Å—Ç–∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏"""
        current = self.brush_size.get()
        new_size = max(2, min(20, current + delta))
        self.brush_size.set(new_size)

    def start_draw(self, event):
        """–ù–∞—á–∞–ª–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É"""
        self.last_x, self.last_y = event.x, event.y

    def draw_digit(self, event):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ö–æ–ª—Å—Ç–µ"""
        x, y = event.x, event.y

        if self.last_x and self.last_y:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
            line_color = '#2c3e50' if self.current_theme == 'light' else '#ecf0f1'

            # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –Ω–∞ —Ö–æ–ª—Å—Ç–µ
            self.canvas.create_line(
                self.last_x, self.last_y, x, y,
                fill=line_color,
                width=self.brush_size.get(),
                capstyle=tk.ROUND,
                smooth=True
            )
            # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≤ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            self.draw.line(
                [self.last_x, self.last_y, x, y],
                fill="black",
                width=int(self.brush_size.get())
            )

        self.last_x, self.last_y = x, y

    def reset_last_coords(self, event=None):
        """–°–±—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        self.last_x, self.last_y = None, None

    def clear_canvas(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞"""
        self.canvas.delete("all")
        self.image.paste(255, (0, 0, 280, 280))
        self.draw.rectangle([0, 0, 280, 280], fill=255)
        self.result_label.config(text="–•–æ–ª—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—Ä–∏—Å—É–π—Ç–µ —Ü–∏—Ñ—Ä—É.")
        self.details_label.config(text="")
        self.confidence_label.config(text="")
        self.confidence_canvas.delete("all")
        self.result_label.config(fg=self.themes[self.current_theme]['text_secondary'])

    def animate_result(self, text, color, details="", confidence=None):
        """–ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""

        def update_text(step=0):
            if step <= len(text):
                self.result_label.config(text=text[:step], fg=color)
                self.root.after(20, update_text, step + 1)
            else:
                if details:
                    self.details_label.config(text=details)
                if confidence is not None:
                    self.update_confidence_meter(confidence)

        self.result_label.config(text="")
        self.details_label.config(text="")
        self.confidence_label.config(text="")
        self.confidence_canvas.delete("all")
        update_text()

    def update_confidence_meter(self, confidence):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        # –¢–µ–∫—Å—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        self.confidence_label.config(text=f"–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence:.1%}")

        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.confidence_canvas.delete("all")

        # –§–æ–Ω
        self.confidence_canvas.create_rectangle(0, 0, 200, 15,
                                                fill=self.themes[self.current_theme]['frame_bg'],
                                                outline="")

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        fill_width = int(200 * confidence)
        color = self.get_confidence_color(confidence)

        if fill_width > 0:
            self.confidence_canvas.create_rectangle(0, 0, fill_width, 15,
                                                    fill=color, outline="")

    def get_confidence_color(self, confidence):
        """–¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if confidence > 0.8:
            return '#27ae60'  # –ó–µ–ª–µ–Ω—ã–π
        elif confidence > 0.5:
            return '#f39c12'  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            return '#e74c3c'  # –ö—Ä–∞—Å–Ω—ã–π

    def show_notification(self, message, duration=2000):
        """–ü–æ–∫–∞–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        notification_frame = tk.Frame(
            self.root,
            bg='#3498db',
            relief='raised',
            bd=2
        )
        notification_frame.place(relx=0.5, rely=0.1, anchor='center')

        tk.Label(
            notification_frame,
            text=message,
            font=("Segoe UI", 10, "bold"),
            bg='#3498db',
            fg='white',
            padx=20,
            pady=10
        ).pack()

        self.root.after(duration, notification_frame.destroy)

    def get_best_shift(self, img):
        """–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –º–∞—Å—Å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
        cy, cx = ndimage.center_of_mass(img)
        rows, cols = img.shape
        shiftx = np.round(cols / 2.0 - cx).astype(int)
        shifty = np.round(rows / 2.0 - cy).astype(int)
        return shiftx, shifty

    def shift(self, img, sx, sy):
        """–°–¥–≤–∏–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        rows, cols = img.shape
        M = np.float32([[1, 0, sx], [0, 1, sy]])
        shifted = cv2.warpAffine(img, M, (cols, rows))
        return shifted

    def preprocess_image(self):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏"""

        img_resized = self.image.resize((28, 28))
        img_array = np.array(img_resized)

        img_array = 255 - img_array

        img_array = img_array / 255.0

        img_pil = Image.fromarray((img_array * 255).astype(np.uint8))
        bbox = ImageOps.invert(img_pil).getbbox()
        if bbox:
            img_cropped = img_pil.crop(bbox)
            img_pil = ImageOps.pad(img_cropped, (28, 28), color=0)
            img_array = np.array(img_pil) / 255.0

        shiftx, shifty = self.get_best_shift(img_array)
        img_array = self.shift(img_array, shiftx, shifty)


        img_array = img_array.reshape(1, 28, 28, 1)
        return img_array.astype(np.float32)

    def predict_digit(self):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if self.debounce_timer:
            self.root.after_cancel(self.debounce_timer)

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        self.debounce_timer = self.root.after(300, self._perform_prediction)

    def _perform_prediction(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å ONNX –º–æ–¥–µ–ª—å—é"""

        def predict_thread():
            try:
                self.progress.start()
                self.progress_text.config(text="üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                theme = self.themes[self.current_theme]
                self.result_label.config(text="–ê–Ω–∞–ª–∏–∑...", fg=theme['button_bg'])
                self.root.update()

                img_array = self.preprocess_image()

                input_name = self.model.get_inputs()[0].name

                prediction = self.model.run(None, {input_name: img_array})[0][
                    0]

                predicted_digit = np.argmax(prediction)
                confidence = np.max(prediction)

                self.last_prediction = prediction

                confidence_color = self.get_confidence_color(confidence)
                result_text = f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {predicted_digit}"
                details_text = f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%} | –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: "

                top_3_indices = np.argsort(prediction)[-3:][::-1]
                alternatives = [f"{i}: {prediction[i]:.1%}" for i in top_3_indices[1:] if prediction[i] > 0.01]
                details_text += " | ".join(alternatives) if alternatives else "–Ω–µ—Ç"
                self.animate_result(result_text, confidence_color, details_text, confidence)
            except Exception as e:
                import traceback
                print(traceback.format_exc())  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                theme = self.themes[self.current_theme]
                self.animate_result(f"‚ùå –û—à–∏–±–∫–∞", theme['clear_bg'], str(e))
            finally:
                self.progress.stop()
                self.progress_text.config(text="")

        threading.Thread(target=predict_thread, daemon=True).start()

    def show_probability_chart(self):
        """–ü–æ–∫–∞–∑ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
        if not hasattr(self, 'last_prediction'):
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ!")
            return

        try:
            prediction = self.last_prediction

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
            chart_window = tk.Toplevel(self.root)
            chart_window.title("üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
            chart_window.geometry("800x600")
            chart_window.configure(bg=self.themes[self.current_theme]['bg'])

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É –æ–∫–Ω–∞ –≤ —Ü–≤–µ—Ç —Ç–µ–º—ã
            chart_window.configure(highlightbackground=self.themes[self.current_theme]['window_border'])
            chart_window.configure(highlightthickness=2)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–∫–Ω–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
            self.probability_window = chart_window

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
            chart_window.transient(self.root)
            chart_window.grab_set()

            # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
            self.create_window_controls(chart_window)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            title_label = tk.Label(
                chart_window,
                text="üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
                font=("Segoe UI", 14, "bold"),
                bg=self.themes[self.current_theme]['bg'],
                fg=self.themes[self.current_theme]['fg']
            )
            title_label.pack(pady=10)

            # –°–æ–∑–¥–∞–µ–º matplotlib —Ñ–∏–≥—É—Ä—É —Å —Ü–≤–µ—Ç–æ–º —Ñ–æ–Ω–∞ —Ç–µ–º—ã
            fig, ax = plt.subplots(figsize=(10, 6),
                                   facecolor=self.themes[self.current_theme]['frame_bg'])

            digits = list(range(10))
            probabilities = [prediction[i] for i in digits]

            # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É
            colors = []
            max_prob = max(probabilities)
            for prob in probabilities:
                if prob == max_prob:
                    colors.append('#27ae60')  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                elif prob > 0.1:
                    colors.append('#3498db')  # –°–∏–Ω–∏–π –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö
                else:
                    colors.append('#95a5a6')  # –°–µ—Ä—ã–π –¥–ª—è –Ω–∏–∑–∫–∏—Ö

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            bars = ax.bar(digits, probabilities, color=colors, alpha=0.8,
                          edgecolor=self.themes[self.current_theme]['border_color'],
                          linewidth=1)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
            ax.set_xlabel('–¶–∏—Ñ—Ä—ã', fontsize=12, color=self.themes[self.current_theme]['fg'])
            ax.set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', fontsize=12, color=self.themes[self.current_theme]['fg'])
            ax.set_title('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π', fontsize=14,
                         color=self.themes[self.current_theme]['fg'], pad=20)
            ax.set_ylim(0, 1)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for i, (bar, prob) in enumerate(zip(bars, probabilities)):
                height = bar.get_height()
                if height > 0.01:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    ax.text(bar.get_x() + bar.get_width() / 2., height + 0.01,
                            f'{prob:.1%}',
                            ha='center', va='bottom',
                            fontsize=10,
                            color=self.themes[self.current_theme]['fg'],
                            weight='bold')

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –æ—Å–µ–π –∏ —Å–µ—Ç–∫–∏
            ax.tick_params(colors=self.themes[self.current_theme]['fg'], labelsize=10)
            ax.spines['bottom'].set_color(self.themes[self.current_theme]['fg'])
            ax.spines['top'].set_color(self.themes[self.current_theme]['fg'])
            ax.spines['left'].set_color(self.themes[self.current_theme]['fg'])
            ax.spines['right'].set_color(self.themes[self.current_theme]['fg'])

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
            ax.grid(True, alpha=0.3, color=self.themes[self.current_theme]['fg'])

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–∫ –ø–æ –æ—Å–∏ X
            ax.set_xticks(digits)
            ax.set_xticklabels(digits, color=self.themes[self.current_theme]['fg'])

            # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤ tkinter
            canvas = FigureCanvasTkAgg(fig, chart_window)
            canvas.draw()

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            info_frame = tk.Frame(chart_window, bg=self.themes[self.current_theme]['bg'])
            info_frame.pack(fill='x', padx=20, pady=10)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            max_digit = np.argmax(prediction)
            max_prob = prediction[max_digit]
            info_text = f"–ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è —Ü–∏—Ñ—Ä–∞: {max_digit} ({max_prob:.1%})"

            tk.Label(
                info_frame,
                text=info_text,
                font=("Segoe UI", 11, "bold"),
                bg=self.themes[self.current_theme]['bg'],
                fg=self.themes[self.current_theme]['fg']
            ).pack()

            canvas.get_tk_widget().pack(fill='both', expand=True, padx=20, pady=10)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –æ–∫–Ω–∞
            self.update_probability_window_theme()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {str(e)}")

    def create_window_controls(self, window):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º"""
        control_frame = tk.Frame(window, bg=self.themes[self.current_theme]['window_controls'],
                                 height=30)
        control_frame.pack(fill='x')
        control_frame.pack_propagate(False)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
        button_frame = tk.Frame(control_frame, bg=self.themes[self.current_theme]['window_controls'])
        button_frame.pack(side=tk.RIGHT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç—å
        minimize_btn = tk.Button(
            button_frame,
            text="‚àí",
            font=("Arial", 12, "bold"),
            width=2,
            height=1,
            bg=self.themes[self.current_theme]['window_controls'],
            fg=self.themes[self.current_theme]['fg'],
            activebackground=self.themes[self.current_theme]['button_bg'],
            activeforeground='white',
            relief='flat',
            bd=0,
            command=window.iconify
        )
        minimize_btn.pack(side=tk.LEFT, padx=2)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
        close_btn = tk.Button(
            button_frame,
            text="√ó",
            font=("Arial", 12, "bold"),
            width=2,
            height=1,
            bg=self.themes[self.current_theme]['window_controls'],
            fg=self.themes[self.current_theme]['fg'],
            activebackground=self.themes[self.current_theme]['clear_bg'],
            activeforeground='white',
            relief='flat',
            bd=0,
            command=window.destroy
        )
        close_btn.pack(side=tk.LEFT, padx=2)

        # –î–µ–ª–∞–µ–º –ø–∞–Ω–µ–ª—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π
        def start_move(event):
            window.x = event.x
            window.y = event.y

        def do_move(event):
            deltax = event.x - window.x
            deltay = event.y - window.y
            x = window.winfo_x() + deltax
            y = window.winfo_y() + deltay
            window.geometry(f"+{x}+{y}")

        control_frame.bind("<ButtonPress-1>", start_move)
        control_frame.bind("<B1-Motion>", do_move)

    def update_probability_window_theme(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –æ–∫–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
        if hasattr(self, 'probability_window') and self.probability_window.winfo_exists():
            theme = self.themes[self.current_theme]
            self.probability_window.configure(bg=theme['bg'])
            self.probability_window.configure(highlightbackground=theme['window_border'])

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for widget in self.probability_window.winfo_children():
                if isinstance(widget, tk.Label):
                    if '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π' in widget.cget('text') or '–ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è' in widget.cget('text'):
                        widget.configure(bg=theme['bg'], fg=theme['fg'])
                    else:
                        widget.configure(bg=theme['bg'], fg=theme['fg'])
                elif isinstance(widget, tk.Frame):
                    widget.configure(bg=theme['bg'])
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    for child in widget.winfo_children():
                        if isinstance(child, tk.Label):
                            child.configure(bg=theme['bg'], fg=theme['fg'])
                        elif isinstance(child, tk.Button):
                            child.configure(bg=theme['window_controls'], fg=theme['fg'])

    def show_processed_image(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            img_array = self.preprocess_image()

            preview_window = tk.Toplevel(self.root)
            preview_window.title("üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            preview_window.geometry("400x550")
            preview_window.configure(bg=self.themes[self.current_theme]['bg'])
            preview_window.resizable(False, False)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É –æ–∫–Ω–∞ –≤ —Ü–≤–µ—Ç —Ç–µ–º—ã
            preview_window.configure(highlightbackground=self.themes[self.current_theme]['window_border'])
            preview_window.configure(highlightthickness=2)

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
            preview_window.transient(self.root)
            preview_window.grab_set()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            tk.Label(
                preview_window,
                text="üìä –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                font=("Segoe UI", 12, "bold"),
                bg=self.themes[self.current_theme]['bg'],
                fg=self.themes[self.current_theme]['fg']
            ).pack(pady=10)

            # –°–æ–∑–¥–∞–µ–º matplotlib —Ñ–∏–≥—É—Ä—É
            fig, ax = plt.subplots(figsize=(3, 3), facecolor=self.themes[self.current_theme]['frame_bg'])
            ax.imshow(img_array.reshape(28, 28), cmap='gray')
            ax.set_title("28√ó28 –ø–∏–∫—Å–µ–ª–µ–π", fontsize=10, color=self.themes[self.current_theme]['fg'])
            ax.axis('off')

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è matplotlib
            if self.current_theme == 'dark' or self.current_theme == 'blue':
                ax.tick_params(colors='white')

            # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤ tkinter
            canvas = FigureCanvasTkAgg(fig, preview_window)
            canvas.draw()
            canvas.get_tk_widget().pack(pady=10)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ
            info_frame = tk.Frame(preview_window, bg=self.themes[self.current_theme]['bg'])
            info_frame.pack(pady=10)

            tk.Label(
                info_frame,
                text="‚úì –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ 28√ó28\n‚úì –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –º–∞—Å—Å–µ\n‚úì –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π",
                font=("Segoe UI", 9),
                bg=self.themes[self.current_theme]['bg'],
                fg=self.themes[self.current_theme]['text_secondary'],
                justify='left'
            ).pack()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            stats_frame = tk.Frame(preview_window, bg=self.themes[self.current_theme]['bg'])
            stats_frame.pack(pady=10)

            img_stats = img_array.flatten()
            tk.Label(
                stats_frame,
                text=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                     f"–ú–∏–Ω. –∑–Ω–∞—á–µ–Ω–∏–µ: {img_stats.min():.3f}\n"
                     f"–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ: {img_stats.max():.3f}\n"
                     f"–°—Ä–µ–¥–Ω–µ–µ: {img_stats.mean():.3f}\n"
                     f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {img_stats.std():.3f}",
                font=("Segoe UI", 9),
                bg=self.themes[self.current_theme]['bg'],
                fg=self.themes[self.current_theme]['fg'],
                justify='left'
            ).pack()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {str(e)}")

    def create_tooltip(self, widget, text):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏"""

        def on_enter(event):
            self.tooltip = tk.Toplevel()
            self.tooltip.wm_overrideredirect(True)
            self.tooltip.wm_geometry(f"+{event.x_root + 10}+{event.y_root + 10}")

            label = tk.Label(
                self.tooltip,
                text=text,
                background="#ffffe0",
                relief="solid",
                borderwidth=1,
                font=("Segoe UI", 8),
                padx=5,
                pady=2
            )
            label.pack()

        def on_leave(event):
            if hasattr(self, 'tooltip') and self.tooltip:
                self.tooltip.destroy()
                self.tooltip = None

        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (450 // 2)
        y = (self.root.winfo_screenheight() // 2) - (700 // 2)
        self.root.geometry(f"450x700+{x}+{y}")

        self.root.mainloop()


if __name__ == "__main__":
    try:
        app = ModernDigitRecognizer()
        app.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()
        import sys

        sys.exit(1)